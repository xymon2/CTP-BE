# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import pythonRuntime_pb2 as pythonRuntime__pb2


class CodingTestStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.RunCode = channel.unary_unary(
                '/CodingTest/RunCode',
                request_serializer=pythonRuntime__pb2.RunRequest.SerializeToString,
                response_deserializer=pythonRuntime__pb2.RunResponse.FromString,
                )
        self.SubmitCode = channel.unary_unary(
                '/CodingTest/SubmitCode',
                request_serializer=pythonRuntime__pb2.SubmitRequest.SerializeToString,
                response_deserializer=pythonRuntime__pb2.SubmitResponse.FromString,
                )


class CodingTestServicer(object):
    """Missing associated documentation comment in .proto file."""

    def RunCode(self, request, context):
        """Define methods and they should be implemented in server-side.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SubmitCode(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_CodingTestServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'RunCode': grpc.unary_unary_rpc_method_handler(
                    servicer.RunCode,
                    request_deserializer=pythonRuntime__pb2.RunRequest.FromString,
                    response_serializer=pythonRuntime__pb2.RunResponse.SerializeToString,
            ),
            'SubmitCode': grpc.unary_unary_rpc_method_handler(
                    servicer.SubmitCode,
                    request_deserializer=pythonRuntime__pb2.SubmitRequest.FromString,
                    response_serializer=pythonRuntime__pb2.SubmitResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'CodingTest', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class CodingTest(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def RunCode(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/CodingTest/RunCode',
            pythonRuntime__pb2.RunRequest.SerializeToString,
            pythonRuntime__pb2.RunResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SubmitCode(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/CodingTest/SubmitCode',
            pythonRuntime__pb2.SubmitRequest.SerializeToString,
            pythonRuntime__pb2.SubmitResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
